package fpt.aptech.bookingservice.service;

import com.paypal.api.payments.*;
import com.paypal.base.rest.APIContext;
import com.paypal.base.rest.PayPalRESTException;
import fpt.aptech.bookingservice.dtos.MembershipSubscriptionDTO;
import fpt.aptech.bookingservice.dtos.UserDTO;
import fpt.aptech.bookingservice.eureka_client.UserEurekaClient;
import fpt.aptech.bookingservice.models.MembershipSubscription;
import fpt.aptech.bookingservice.models.PayMethodType;
import fpt.aptech.bookingservice.models.PayStatusType;
import fpt.aptech.bookingservice.models.WorkoutPackage;
import fpt.aptech.bookingservice.repository.MembershipSubscriptionRepository;
import fpt.aptech.bookingservice.repository.WorkoutPackageRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RequestBody;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class PayPalService {
    private final APIContext apiContext;
    private final UserEurekaClient userEurekaClient;
    private final WorkoutPackageRepository workoutPackageRepository;
    private final MembershipSubscriptionRepository membershipRepository;

    /**
     * T·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng Payment m·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu quy tr√¨nh thanh to√°n v·ªõi PayPal.
     * <p>
     * total S·ªë ti·ªÅn thanh to√°n
     * currency ƒê∆°n v·ªã ti·ªÅn t·ªá
     * method Ph∆∞∆°ng th·ª©c thanh to√°n
     * intent M·ª•c ƒë√≠ch c·ªßa thanh to√°n (e.g., sale, authorize)
     * description M√¥ t·∫£ v·ªÅ giao d·ªãch
     * cancelUrl URL ƒë·ªÉ chuy·ªÉn h∆∞·ªõng khi thanh to√°n b·ªã h·ªßy
     * successUrl URL ƒë·ªÉ chuy·ªÉn h∆∞·ªõng khi thanh to√°n th√†nh c√¥ng
     *
     * @return ƒê·ªëi t∆∞·ª£ng Payment ƒë√£ ƒë∆∞·ª£c t·∫°o
     * @throws PayPalRESTException N·∫øu c√≥ l·ªói trong qu√° tr√¨nh t∆∞∆°ng t√°c v·ªõi PayPal
     */
//    public Payment createPayment(MembershipSubscriptionDTO subscriptionDTO) throws PayPalRESTException {
//
//        System.out.println("‚úÖ Nh·∫≠n ƒë∆∞·ª£c request t·ª´ Flutter: " + subscriptionDTO);
//
//        //Ki·ªÉm tra s·ª± t√¥n t·∫°i c·ªßa userId c√≥ h·ª£p l·ªá hay kh√¥ng
//        UserDTO userExisting = userEurekaClient.getUserById(subscriptionDTO.getUserId());
//        if (userExisting == null) {
//            throw new PayPalRESTException("User not found");
//        }
//
//        WorkoutPackage packageExisting = workoutPackageRepository.findById(subscriptionDTO.getPackageId())
//                .orElseThrow(() -> new RuntimeException("Workout package not found"));
//
//        // Kh·ªüi t·∫°o gi√° tr·ªã totalAmount ban ƒë·∫ßu t·ª´ price c·ªßa package
//        double initialAmount = packageExisting.getPrice();
//
//        // ƒê·ªãnh d·∫°ng l·∫°i price (initialAmount) ƒë·ªÉ ƒë·∫£m b·∫£o l√† m·ªôt s·ªë th·∫≠p ph√¢n v·ªõi 2 ch·ªØ s·ªë
//        String formattedPrice = String.format("%.2f", initialAmount);
//        double formattedInitialAmount = Double.parseDouble(formattedPrice);
//
//        System.out.println("Formatted Init Price: " + formattedInitialAmount);
//
//        // Ki·ªÉm tra gi√° tr·ªã totalAmount ƒë∆∞·ª£c g·ª≠i t·ª´ frontend
//        double finalAmount = subscriptionDTO.getTotalAmount();
//
//        System.out.println("Final Amount : " + finalAmount);
//
//        // N·∫øu totalAmount <= 0, s·ª≠ d·ª•ng gi√° tr·ªã price c·ªßa package ƒë·ªÉ t√≠nh to√°n
//        if (finalAmount <= 0) {
//            finalAmount = initialAmount;
//        }
//
//        // ƒê·ªãnh d·∫°ng finalAmount th√†nh 2 ch·ªØ s·ªë th·∫≠p ph√¢n
//        String formattedAmount = String.format("%.2f", finalAmount);
//        System.out.println("Final Amount after discount: " + formattedAmount);
//
//        Amount amount = new Amount();
//        amount.setCurrency(subscriptionDTO.getCurrency());
//        amount.setTotal(String.valueOf(finalAmount));
//
//        // T·∫°o ƒë·ªëi t∆∞·ª£ng Transaction v√† thi·∫øt l·∫≠p m√¥ t·∫£ v√† s·ªë ti·ªÅn
//        Transaction transaction = new Transaction();
//        transaction.setDescription(subscriptionDTO.getDescription());
//        transaction.setAmount(amount);
//
//        // T·∫°o danh s√°ch c√°c giao d·ªãch v√† th√™m giao d·ªãch v·ª´a t·∫°o v√†o danh s√°ch
//        List<Transaction> transactions = new ArrayList<>();
//        transactions.add(transaction);
//
//        // T·∫°o ƒë·ªëi t∆∞·ª£ng Payer v√† thi·∫øt l·∫≠p ph∆∞∆°ng th·ª©c thanh to√°n
//        Payer payer = new Payer();
//        payer.setPaymentMethod(PayMethodType.PAYPAL.toString());
//
//        // T·∫°o ƒë·ªëi t∆∞·ª£ng Payment v√† thi·∫øt l·∫≠p c√°c thu·ªôc t√≠nh li√™n quan
//        Payment payment = new Payment();
//        payment.setIntent(subscriptionDTO.getIntent());
//        payment.setPayer(payer);
//        payment.setTransactions(transactions);
//
//        System.out.println("Payment Request JSON: " + payment.toJSON());  // Log to√†n b·ªô JSON c·ªßa payment
//
//
//        // T·∫°o ƒë·ªëi t∆∞·ª£ng RedirectUrls v√† thi·∫øt l·∫≠p c√°c URL chuy·ªÉn h∆∞·ªõng
//        RedirectUrls redirectUrls = new RedirectUrls();
//        redirectUrls.setCancelUrl(subscriptionDTO.getCancelUrl());
//        redirectUrls.setReturnUrl(subscriptionDTO.getSuccessUrl());
//        payment.setRedirectUrls(redirectUrls);
//
//        System.out.println("‚úÖ G·ª≠i y√™u c·∫ßu t·∫°o thanh to√°n ƒë·∫øn PayPal...");
//
//        // T·∫°o m·ªôt Payment m·ªõi tr√™n PayPal
//        Payment createdPayment = payment.create(apiContext);
//
//        // L·∫•y ng√†y thanh to√°n l√† ng√†y hi·ªán t·∫°i
//        LocalDateTime currentDateTime = LocalDateTime.now();
//
//        // T√≠nh to√°n ng√†y k·∫øt th√∫c (th√™m durationMonth v√†o ng√†y b·∫Øt ƒë·∫ßu)
//        LocalDateTime endDate = currentDateTime.plusMonths(packageExisting.getDurationMonth());
//
//        // L∆∞u th√¥ng tin thanh to√°n v√†o c∆° s·ªü d·ªØ li·ªáu
//        MembershipSubscription membershipSubscription = MembershipSubscription.builder()
//                .packageId(subscriptionDTO.getPackageId())
//                .userId(subscriptionDTO.getUserId())
//                .fullName(userExisting.getFullName())
//                .buyDate(currentDateTime)   //Ng√†y mua s·∫Ω l√† ng√†y thanh to√°n
//                .startDate(currentDateTime.toLocalDate())  // Start date l√† ng√†y thanh to√°n th√†nh c√¥ng
//                .endDate(endDate.toLocalDate())    // End date l√† ng√†y t√≠nh to√°n d·ª±a tr√™n duration
//                .payMethodType(PayMethodType.valueOf(PayMethodType.PAYPAL.toString()))
//                .payStatusType(PayStatusType.valueOf(PayStatusType.PENDING.toString()))
//                .packageName(packageExisting.getPackageName())
//                .description(subscriptionDTO.getDescription())
//                .totalAmount(finalAmount)
//                .paymentId(createdPayment.getId())
//                .build();
//        membershipRepository.save(membershipSubscription);
//        return createdPayment;
//    }

    public ResponseEntity<?> createPayment(@RequestBody MembershipSubscriptionDTO subscriptionDTO) {
        try {
            System.out.println("‚úÖ Nh·∫≠n ƒë∆∞·ª£c request t·ª´ Flutter: " + subscriptionDTO);

            // Ki·ªÉm tra userId c√≥ t·ªìn t·∫°i kh√¥ng
            UserDTO userExisting = userEurekaClient.getUserById(subscriptionDTO.getUserId());
            if (userExisting == null) {
                System.out.println("‚ùå User kh√¥ng t·ªìn t·∫°i!");
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(Map.of("error", "User not found"));
            }

            // L·∫•y g√≥i t·∫≠p theo ID
            WorkoutPackage packageExisting = workoutPackageRepository.findById(subscriptionDTO.getPackageId())
                    .orElseThrow(() -> new RuntimeException("Workout package not found"));

            double finalAmount = packageExisting.getPrice();
            if (subscriptionDTO.getTotalAmount() > 0) {
                finalAmount = subscriptionDTO.getTotalAmount();
            }

            System.out.println("‚úÖ Final Amount: " + finalAmount);

            Amount amount = new Amount();
            amount.setCurrency(subscriptionDTO.getCurrency());
            amount.setTotal(String.format("%.2f", finalAmount));

            Transaction transaction = new Transaction();
            transaction.setDescription(subscriptionDTO.getDescription());
            transaction.setAmount(amount);

            List<Transaction> transactions = new ArrayList<>();
            transactions.add(transaction);

            Payer payer = new Payer();
            payer.setPaymentMethod(PayMethodType.PAYPAL.toString());

            Payment payment = new Payment();
            payment.setIntent(subscriptionDTO.getIntent());
            payment.setPayer(payer);
            payment.setTransactions(transactions);

            RedirectUrls redirectUrls = new RedirectUrls();
            redirectUrls.setCancelUrl(subscriptionDTO.getCancelUrl());
            redirectUrls.setReturnUrl(subscriptionDTO.getSuccessUrl());
            payment.setRedirectUrls(redirectUrls);

            System.out.println("‚úÖ G·ª≠i y√™u c·∫ßu t·∫°o thanh to√°n ƒë·∫øn PayPal...");

            // üõë C·∫©n th·∫≠n! L·ªánh n√†y c√≥ th·ªÉ b·ªã l·ªói n·∫øu PayPal API kh√¥ng ph·∫£n h·ªìi
            Payment createdPayment = payment.create(apiContext);

            if (createdPayment == null) {
                System.out.println("‚ùå PayPal kh√¥ng tr·∫£ v·ªÅ ph·∫£n h·ªìi!");
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(Map.of("error", "PayPal payment creation failed"));
            }

            System.out.println("‚úÖ PayPal ƒë√£ t·∫°o thanh to√°n th√†nh c√¥ng: " + createdPayment.getId());

            // ‚úÖ T√¨m URL ph√™ duy·ªát t·ª´ danh s√°ch links c·ªßa PayPal
            String approvalUrl = null;
            for (Links link : createdPayment.getLinks()) {
                if ("approval_url".equals(link.getRel())) {
                    approvalUrl = link.getHref();
                    break;
                }
            }

            // N·∫øu kh√¥ng t√¨m th·∫•y URL, tr·∫£ v·ªÅ l·ªói
            if (approvalUrl == null) {
                System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y approval URL!");
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                        .body(Map.of("error", "Kh√¥ng t√¨m th·∫•y approval URL t·ª´ PayPal"));
            }

            // L∆∞u v√†o database
            MembershipSubscription membershipSubscription = MembershipSubscription.builder()
                    .packageId(subscriptionDTO.getPackageId())
                    .userId(subscriptionDTO.getUserId())
                    .fullName(userExisting.getFullName())
                    .buyDate(LocalDateTime.now())
                    .startDate(LocalDateTime.now().toLocalDate())
                    .endDate(LocalDateTime.now().plusMonths(packageExisting.getDurationMonth()).toLocalDate())
                    .payMethodType(PayMethodType.PAYPAL)
                    .payStatusType(PayStatusType.PENDING)
                    .packageName(packageExisting.getPackageName())
                    .description(subscriptionDTO.getDescription())
                    .totalAmount(finalAmount)
                    .paymentId(createdPayment.getId())
                    .build();

            membershipRepository.save(membershipSubscription);

            // ‚úÖ ƒê·∫£m b·∫£o lu√¥n tr·∫£ v·ªÅ ph·∫£n h·ªìi cho Flutter
            return ResponseEntity.ok(Map.of("approvalUrl", approvalUrl));
        } catch (Exception e) {
            System.out.println("‚ùå L·ªói khi x·ª≠ l√Ω thanh to√°n: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(Map.of("error", e.getMessage()));
        }
    }


    /**
     * Th·ª±c hi·ªán thanh to√°n sau khi ng∆∞·ªùi d√πng x√°c nh·∫≠n thanh to√°n tr√™n PayPal.
     * <p>
     * paymentId ID c·ªßa giao d·ªãch thanh to√°n
     * payerId ID c·ªßa ng∆∞·ªùi thanh to√°n
     *
     * @return ƒê·ªëi t∆∞·ª£ng Payment ƒë√£ ƒë∆∞·ª£c th·ª±c hi·ªán
     * @throws PayPalRESTException N·∫øu c√≥ l·ªói trong qu√° tr√¨nh t∆∞∆°ng t√°c v·ªõi PayPal
     */
    public Payment executePayment(String paymentId, String payerId) throws PayPalRESTException {

        // T·∫°o ƒë·ªëi t∆∞·ª£ng Payment v·ªõi ID thanh to√°n
        Payment payment = new Payment();
        payment.setId(paymentId);
        // T·∫°o ƒë·ªëi t∆∞·ª£ng PaymentExecution v√† thi·∫øt l·∫≠p ID ng∆∞·ªùi thanh to√°n
        PaymentExecution paymentExecution = new PaymentExecution();
        paymentExecution.setPayerId(payerId);
        // Th·ª±c hi·ªán thanh to√°n tr√™n PayPal
        Payment executedPayment = payment.execute(apiContext, paymentExecution);
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n sau khi th·ª±c hi·ªán
        MembershipSubscription paymentMembership = membershipRepository.findByPaymentId(paymentId);
        if (paymentMembership != null) {
            paymentMembership.setPayerId(payerId);
            paymentMembership.setPayStatusType(PayStatusType.valueOf(PayStatusType.COMPLETED.toString()));
            // C·∫≠p nh·∫≠t g√≥i t·∫≠p (packageId) cho user
            userEurekaClient.assignWorkoutPackage(paymentMembership.getUserId(), paymentMembership.getPackageId());
            membershipRepository.save(paymentMembership);
        }
        return executedPayment;
    }

    public MembershipSubscription getMembershippaymentId(String paymentId) {
        return membershipRepository.findByPaymentId(paymentId);
    }

    public MembershipSubscription getMembershipByUserId(long userId)  {
         var userExisting = membershipRepository.findMemberShipByUserId(userId);
         if (userExisting != null) {
             return membershipRepository.findMemberShipByUserId(userId);
         }
         else {
             throw new RuntimeException("Membership with userId " + userId + " not found");
         }
    }

}
